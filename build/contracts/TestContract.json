{
  "contractName": "TestContract",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getTellorValues",
      "outputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_didGet",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "endValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "addTipWithEther",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "disputeOptimisticValue",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfValuesPerTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isValue",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputedValues",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "endDateTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentValue",
      "outputs": [
        {
          "name": "ifRetrieve",
          "type": "bool"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_request",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_granularity",
          "type": "uint256"
        },
        {
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdsIncluded",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "granularity",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTimestamps",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "disputePeriod",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFirstVerifiedDataAfter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getNumberOfDisputedValues",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFirstUndisputedValueAfter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDisputedValueByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "addTip",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startDateTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setValue",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isDisputed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contractEnded",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIsValue",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_userContract",
          "type": "address"
        }
      ],
      "name": "setUserContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestIds",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDisputedValues",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "disputeFee",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "longWins",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_request",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_granularity",
          "type": "uint256"
        }
      ],
      "name": "requestDataWithEther",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "Id",
          "type": "bytes32"
        }
      ],
      "name": "resultFor",
      "outputs": [
        {
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "name": "outcome",
          "type": "int256"
        },
        {
          "name": "status",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getAnyDataAfter",
      "outputs": [
        {
          "name": "_ifRetrieve",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdsIncluded",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMyValuesByTimestamp",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_userContract",
          "type": "address"
        },
        {
          "name": "_disputeFeeRequired",
          "type": "uint256"
        },
        {
          "name": "_disputePeriod",
          "type": "uint256"
        },
        {
          "name": "_requestIds",
          "type": "uint256[]"
        },
        {
          "name": "_granularity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_svalue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_evalue",
          "type": "uint256"
        }
      ],
      "name": "ContractSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "NewValueSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_disputer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ValueDisputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TellorValuePlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setContractDetails",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "settleContracts",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getTellorValues\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_didGet\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"addTipWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"disputeOptimisticValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getNumberOfValuesPerTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setContractDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"name\":\"ifRetrieve\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_request\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_granularity\",\"type\":\"uint256\"},{\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdsIncluded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disputePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getFirstVerifiedDataAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfDisputedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getFirstUndisputedValueAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDisputedValueByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"addTip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isDisputed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userContract\",\"type\":\"address\"}],\"name\":\"setUserContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDisputedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disputeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"longWins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_request\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_granularity\",\"type\":\"uint256\"}],\"name\":\"requestDataWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Id\",\"type\":\"bytes32\"}],\"name\":\"resultFor\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"outcome\",\"type\":\"int256\"},{\"name\":\"status\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getAnyDataAfter\",\"outputs\":[{\"name\":\"_ifRetrieve\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdsIncluded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMyValuesByTimestamp\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_userContract\",\"type\":\"address\"},{\"name\":\"_disputeFeeRequired\",\"type\":\"uint256\"},{\"name\":\"_disputePeriod\",\"type\":\"uint256\"},{\"name\":\"_requestIds\",\"type\":\"uint256[]\"},{\"name\":\"_granularity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_svalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_evalue\",\"type\":\"uint256\"}],\"name\":\"ContractSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NewValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_disputer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ValueDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TellorValuePlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addTip(uint256,uint256)\":{\"details\":\"Allows the user to tip miners for the specified request using Tributes\\r\",\"params\":{\"_requestId\":\"to tip\\r\",\"_tip\":\"amount\\r\"}},\"addTipWithEther(uint256)\":{\"details\":\"Allows user to add tip with Ether by sending the ETH to the userContract and exchanging it for Tributes\\r at the price specified by the userContract owner.\\r\",\"params\":{\"_requestId\":\"to tip\\r\"}},\"constructor\":{\"details\":\"This constructor function is used to pass variables to the optimistic contract's constructor\\r and the function is blank\\r\",\"params\":{\"_disputeFeeRequired\":\"the fee to dispute the optimistic price(price sumbitted by known trusted party)\\r\",\"_disputePeriod\":\"is the time frame a value can be disputed after being imputed\\r\",\"_granularity\":\"is the amount of decimals desired on the requested value\\r\",\"_requestIds\":\"are the requests Id's on the Tellor System corresponding to the data types used on this contract.\\r It is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\\r System be sure to create some.\\r\",\"_userContract\":\"address for UserContract\\r\"}},\"disputeOptimisticValue(uint256)\":{\"details\":\"allows user to initiate dispute on the value of the specified timestamp\\r\",\"params\":{\"_timestamp\":\"is the timestamp for the value to be disputed\\r\"}},\"getAnyDataAfter(uint256,uint256)\":{\"details\":\"Allows the user to get the first value for the requestId after the specified timestamp\\r\",\"params\":{\"_requestId\":\"is the requestId to look up the value for\\r\",\"_timestamp\":\"after which to search for first verified value\\r\"},\"return\":\"bool true if it is able to retreive a value, the value, and the value's timestamp\\r\"},\"getCurrentValue()\":{\"details\":\"Getter function for latest value available\\r\",\"return\":\"latest value available\\r\"},\"getCurrentValue(uint256)\":{\"details\":\"Allows the user to get the latest value for the requestId specified\\r\",\"params\":{\"_requestId\":\"is the requestId to look up the value for\\r\"},\"return\":\"bool true if it is able to retreive a value, the value, and the value's timestamp\\r\"},\"getDisputedValueByIndex(uint256)\":{\"details\":\"Getter function for the dispute value by index\\r\",\"return\":\"the value\\r\"},\"getDisputedValues()\":{\"details\":\"Getter function for all disputed values\\r\",\"return\":\"the array with all values under dispute\\r\"},\"getFirstUndisputedValueAfter(uint256)\":{\"details\":\"Get the first undisputed value after the timestamp specified. This function is used within the getTellorValues\\r but can be used on its own.\\r\",\"params\":{\"_timestamp\":\"to search the first undisputed value there after\\r\"}},\"getFirstVerifiedDataAfter(uint256,uint256)\":{\"details\":\"Allows the user to get the first verified value for the requestId after the specified timestamp\\r\",\"params\":{\"_requestId\":\"is the requestId to look up the value for\\r\",\"_timestamp\":\"after which to search for first verified value\\r\"},\"return\":\"bool true if it is able to retreive a value, the value, and the value's timestamp, the timestamp after\\r which it searched for the first verified value\\r\"},\"getIsValue(uint256)\":{\"details\":\"Checks to if a value exists for the specifived timestamp\\r\",\"params\":{\"_timestamp\":\"to verify\\r\"},\"return\":\"ture if it exists\\r\"},\"getMyValuesByTimestamp(uint256)\":{\"details\":\"Getter function for the value based on the timestamp specified\\r\",\"params\":{\"_timestamp\":\"to retreive value from\\r\"}},\"getNumberOfDisputedValues()\":{\"details\":\"Getter function for the number of disputed values\\r\",\"return\":\"uint count of number of values for the spedified timestamp\\r\"},\"getNumberOfValuesPerTimestamp(uint256)\":{\"details\":\"Getter function for the number of RequestIds associated with a timestamp, based on the timestamp specified\\r\",\"params\":{\"_timestamp\":\"to retreive number of requestIds\\r\"},\"return\":\"uint count of number of values for the spedified timestamp\\r\"},\"getRequestIds()\":{\"details\":\"Getter function for the requests Ids' from Tellor associated with this price feed\\r\",\"return\":\"uint array of requests Ids'\\r\"},\"getRequestIdsIncluded(uint256)\":{\"details\":\"Getter function for the requests Ids' from Tellor associated with this price feed\\r at the specified timestamp. This only gets populated after a dispute is initiated and the\\r function getTellorValues is ran.\\r\",\"params\":{\"_timestamp\":\"to retreive the requestIds\\r\"},\"return\":\"uint array of requests Ids' included in the calcluation of the value\\r\"},\"getTellorValues(uint256)\":{\"details\":\"This function gets the Tellor requestIds values for the disputed timestamp. It averages the values on the\\r requestsIds and replaces the value set by the contract owner, centralized party.\\r\",\"params\":{\"_timestamp\":\"to get Tellor data from\\r\"},\"return\":\"uint of new value and true if it was able to get Tellor data\\r\"},\"getTimestamps()\":{\"details\":\"Getter function for the timestamps available\\r\",\"return\":\"uint array of timestamps available\\r\"},\"isDisputed(uint256)\":{\"details\":\"This checks if the value for the specified timestamp is under dispute\\r\",\"params\":{\"_timestamp\":\"to check if it is under dispute\\r\"},\"return\":\"true if it is under dispute\\r\"},\"requestData(string,string,uint256,uint256)\":{\"details\":\"Allows the user to submit a request for data to the oracle using Tributes\\r Allowing this prevents us from increasing spread too high (since if we set the price too hight\\r users will just go to an exchange and get tokens from there)\\r\",\"params\":{\"_granularity\":\"is the number of decimals miners should include on the submitted value\\r\",\"_request\":\"string API being requested to be mined\\r\",\"_symbol\":\"is the short string symbol for the api request\\r\",\"_tip\":\"amount the requester is willing to pay to be get on queue. Miners\\r mine the onDeckQueryHash, or the api with the highest payout pool\\r\"}},\"requestDataWithEther(string,string,uint256)\":{\"details\":\"Allows the user to submit a request for data to the oracle using ETH\\r\",\"params\":{\"_granularity\":\"is the number of decimals miners should include on the submitted value\\r\",\"_request\":\"string API being requested to be mined\\r\",\"_symbol\":\"is the short string symbol for the api request\\r\"}},\"setContractDetails(uint256)\":{\"details\":\"creates a start(now) and end time(now + duration specified) for testing a contract start and end period\\r\",\"params\":{\"_duration\":\"in seconds\\r\"}},\"setUserContract(address)\":{\"details\":\"allows owner to set the user contract address\\r\",\"params\":{\"_userContract\":\"address\\r\"}},\"setValue(uint256,uint256)\":{\"details\":\"allows contract owner, a centralized party to enter value\\r\",\"params\":{\"_timestamp\":\"is the timestamp for the value\\r\",\"_value\":\"is the value for the timestamp specified\\r\"}},\"settleContracts()\":{\"details\":\"testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\\r and the first undisputed value after the end time of the contract and settleling(payin off) it.\\r\"},\"transferOwnership(address)\":{\"details\":\"allows owner to transfer ownership\\r\",\"params\":{\"_newOwner\":\"address\\r\"}},\"withdrawETH()\":{\"details\":\"Allows the contract owner(Tellor) to withdraw ETH from this contract\\r\"}},\"title\":\"Reader\\r This contracts is a pretend contract using Tellor that compares two time values\\r\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/company/code/usingTellor/contracts/testContracts/TestContract.sol\":\"TestContract\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/company/code/usingTellor/contracts/Optimistic.sol\":{\"keccak256\":\"0xc77597436705fa669949aab03899d13ed786b5a718df162cf04a3cced7c237d9\",\"urls\":[\"bzzr://21c99a33813aa3853f2222aa265c2771b9182c228bc4bc3d24e71bba4d06271d\"]},\"/C/company/code/usingTellor/contracts/OracleIDDescriptions.sol\":{\"keccak256\":\"0x96c3460f22849ae9841d0bc0f033da37bed20de85265c823b51a8f3b79011358\",\"urls\":[\"bzzr://23b57542504ff32982114b96df3eab4c9c1b3d44f464b1d9b3cc8a3b80de1b6d\"]},\"/C/company/code/usingTellor/contracts/UserContract.sol\":{\"keccak256\":\"0x541ecc4a8b23ae2c51a961a4e2e725f36ec6fea2ffba5042a9c89614898432f7\",\"urls\":[\"bzzr://a341df52c00560381f77ddb3a4eb192e0ddb7cfe3c2586cf5c90eba9d630b4cb\"]},\"/C/company/code/usingTellor/contracts/UsingTellor.sol\":{\"keccak256\":\"0xeeaa15d1463f9f1f367201e736c28b656298d961ff0329153618effd3586abc0\",\"urls\":[\"bzzr://047b7429a8dc1ea238027b4b5b8c2c5cbedad2faf1138b058fe31931dc3cc3b4\"]},\"/C/company/code/usingTellor/contracts/interfaces/ADOInterface.sol\":{\"keccak256\":\"0xeb68f4d3dbd5ec3864995eaf777e7939191482196f519bbd2c846a63c640ae4c\",\"urls\":[\"bzzr://beb24faf173ba6101a767148ee386493c6f15f1b77f49df1a69c793863b9f1f6\"]},\"/C/company/code/usingTellor/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x8a70742b1e1ac65d3688b2cec1e38196b2de488a18fe4ba66d241414f9728927\",\"urls\":[\"bzzr://da7ee50784484474f0092241847f2d717450ed12bbaeb4040f47628afee80cfb\"]},\"/C/company/code/usingTellor/contracts/libraries/TellorGettersLibrary.sol\":{\"keccak256\":\"0xd3f4e107751d2a5c27cd12b3767bbd464cdc0681c538d8e77a6640a349748455\",\"urls\":[\"bzzr://85cfd14baa2205e0388e3087439ecf17143a3b66e4b287fbfcd7e3e0cf882c3d\"]},\"/C/company/code/usingTellor/contracts/libraries/TellorLibrary.sol\":{\"keccak256\":\"0xccbc25184f09263192238c7a8acf254bf13ec1f06c31156b3cd1c3f438a65b37\",\"urls\":[\"bzzr://6c782d69824055b8efe3f3d5801cc43ad4c3e857f960d698c9bcd86654b469a3\"]},\"/C/company/code/usingTellor/contracts/libraries/TellorStorage.sol\":{\"keccak256\":\"0x3517d1cecb0e449924d673e3fe3bd681bd151973f920d9c716f3baf6499826c7\",\"urls\":[\"bzzr://af89a9f762f67c69fba2cdc517311981663f72e3dd8b597c27aa0d47a4f8560b\"]},\"/C/company/code/usingTellor/contracts/libraries/TellorTransfer.sol\":{\"keccak256\":\"0xed22cf575e10d9794ca7efe160cc360783e00127361a391bd68aa397790394e0\",\"urls\":[\"bzzr://e87dbef3d01b6b847726ec949fb49d4df18cfbc2902e4db6687361c933970a90\"]},\"/C/company/code/usingTellor/contracts/libraries/Utilities.sol\":{\"keccak256\":\"0x70653719f7deda44ce81106e687ad70e56c09c70146e8e70d7ec732f83ba0d6a\",\"urls\":[\"bzzr://0b7a6090a7dd244e28ee3ca27043a88b501854eb17eadc97f1551ff84e2c7202\"]},\"/C/company/code/usingTellor/contracts/testContracts/Tellor.sol\":{\"keccak256\":\"0x47b22cd4cc433c2c9ac608b201a05822842e2274217812264631ded038608fc3\",\"urls\":[\"bzzr://0aa8012c0e7cd6d441a69d45c2c55907832fdf8c503f440e3e4eedbafe7b1011\"]},\"/C/company/code/usingTellor/contracts/testContracts/TellorGetters.sol\":{\"keccak256\":\"0x76372d6015a05a421072354443b990a3973b5e8377023b9925ea85b7f686f008\",\"urls\":[\"bzzr://ca7e23cafb6c14fc4230de2c65d711ad7987d667362633269feec799fd6806ee\"]},\"/C/company/code/usingTellor/contracts/testContracts/TellorMaster.sol\":{\"keccak256\":\"0x40bef5591065126b3caffae521d576d6f0952c286d329e6179f53e17d83f817d\",\"urls\":[\"bzzr://ec55bcea631a5495c110775eee3bf8e028d6a2f987b26bd2c59504b98ec9b8c7\"]},\"/C/company/code/usingTellor/contracts/testContracts/TestContract.sol\":{\"keccak256\":\"0x9e0c022cf14b7475d9dda8111331fda2d7c65de72469a5cdb9dff81d58f2960d\",\"urls\":[\"bzzr://75277656743ab1fcb446c87861903376f3056e296710d6309b0340911e8291dd\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f8838038062002f88833981018060405260a08110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080516401000000008111156200006e57600080fd5b828101905060208101848111156200008557600080fd5b8151856020820283011164010000000082111715620000a357600080fd5b505092919060200180519060200190929190505050848484848484806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505083600a8190555082600b819055508060098190555081600790805190602001906200016d9291906200017e565b5050505050505050505050620001f8565b828054828255906000526020600020908101928215620001bd579160200282015b82811115620001bc5782518255916020019190600101906200019f565b5b509050620001cc9190620001d0565b5090565b620001f591905b80821115620001f1576000816000905550600101620001d7565b5090565b90565b612d8080620002086000396000f3fe6080604052600436106102465760003560e01c806371d8dd1911610139578063ac33a273116100b6578063d09cc57e1161007a578063d09cc57e14610ce1578063d269a83c14610d3e578063dc7ebf0e14610da9578063e086e5ec14610e39578063e631def714610e50578063f2fde38b14610e9f57610246565b8063ac33a27314610ad7578063b63f210a14610b43578063b9ce896b14610baf578063bad4d21e14610bda578063bb19e29614610c0957610246565b806387105801116100fd57806387105801146109965780638da5cb5b146109ad57806391bf116f14610a045780639a64f07014610a33578063a1206d4e14610a8657610246565b806371d8dd191461083f578063752d49a11461088e578063775f75df146108d35780637b8d56e3146108fe5780637ccc586e1461094357610246565b80633f35ff32116101c757806359abbfe41161018b57806359abbfe4146106b15780635bf31d4d1461071d5780635f059f3e14610748578063681012e5146107b357806369949a86146107de57610246565b80633f35ff32146104b25780633fcad964146104dd5780633fff28161461053e578063550921d41461062d578063556f0dc71461068657610246565b80632aa0bc1f1161020e5780632aa0bc1f1461035757806331562d69146103a657806336e9d632146103e157806337ae9e43146104345780633c9177cd1461048757610246565b8063062777ff1461024b5780630f76c114146102a557806316e72abb146102d05780632639e0b0146102fb578063292b8cce14610329575b600080fd5b34801561025757600080fd5b506102846004803603602081101561026e57600080fd5b8101908080359060200190929190505050610ef0565b60405180838152602001821515151581526020019250505060405180910390f35b3480156102b157600080fd5b506102ba6114a7565b6040518082815260200191505060405180910390f35b3480156102dc57600080fd5b506102e5611550565b6040518082815260200191505060405180910390f35b6103276004803603602081101561031157600080fd5b8101908080359060200190929190505050611556565b005b6103556004803603602081101561033f57600080fd5b81019080803590602001909291905050506115e6565b005b34801561036357600080fd5b506103906004803603602081101561037a57600080fd5b810190808035906020019092919050505061183c565b6040518082815260200191505060405180910390f35b3480156103b257600080fd5b506103df600480360360208110156103c957600080fd5b810190808035906020019092919050505061185c565b005b3480156103ed57600080fd5b5061041a6004803603602081101561040457600080fd5b8101908080359060200190929190505050611889565b604051808215151515815260200191505060405180910390f35b34801561044057600080fd5b5061046d6004803603602081101561045757600080fd5b81019080803590602001909291905050506118a9565b604051808215151515815260200191505060405180910390f35b34801561049357600080fd5b5061049c6118c9565b6040518082815260200191505060405180910390f35b3480156104be57600080fd5b506104c76118cf565b6040518082815260200191505060405180910390f35b3480156104e957600080fd5b506105166004803603602081101561050057600080fd5b81019080803590602001909291905050506118d5565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b34801561054a57600080fd5b5061062b6004803603608081101561056157600080fd5b810190808035906020019064010000000081111561057e57600080fd5b82018360208201111561059057600080fd5b803590602001918460018302840111640100000000831117156105b257600080fd5b9091929391929390803590602001906401000000008111156105d357600080fd5b8201836020820111156105e557600080fd5b8035906020019184600183028401116401000000008311171561060757600080fd5b909192939192939080359060200190929190803590602001909291905050506119a8565b005b34801561063957600080fd5b506106706004803603604081101561065057600080fd5b810190808035906020019092919080359060200190929190505050611ca4565b6040518082815260200191505060405180910390f35b34801561069257600080fd5b5061069b611cd2565b6040518082815260200191505060405180910390f35b3480156106bd57600080fd5b506106c6611cd8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107095780820151818401526020810190506106ee565b505050509050019250505060405180910390f35b34801561072957600080fd5b50610732611d30565b6040518082815260200191505060405180910390f35b34801561075457600080fd5b5061078b6004803603604081101561076b57600080fd5b810190808035906020019092919080359060200190929190505050611d36565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b3480156107bf57600080fd5b506107c8611e11565b6040518082815260200191505060405180910390f35b3480156107ea57600080fd5b506108176004803603602081101561080157600080fd5b8101908080359060200190929190505050611e1e565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b34801561084b57600080fd5b506108786004803603602081101561086257600080fd5b8101908080359060200190929190505050611f1a565b6040518082815260200191505060405180910390f35b34801561089a57600080fd5b506108d1600480360360408110156108b157600080fd5b810190808035906020019092919080359060200190929190505050611f3b565b005b3480156108df57600080fd5b506108e86121c1565b6040518082815260200191505060405180910390f35b34801561090a57600080fd5b506109416004803603604081101561092157600080fd5b8101908080359060200190929190803590602001909291905050506121c7565b005b34801561094f57600080fd5b5061097c6004803603602081101561096657600080fd5b81019080803590602001909291905050506123b8565b604051808215151515815260200191505060405180910390f35b3480156109a257600080fd5b506109ab6123e2565b005b3480156109b957600080fd5b506109c26124b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a1057600080fd5b50610a196124dd565b604051808215151515815260200191505060405180910390f35b348015610a3f57600080fd5b50610a6c60048036036020811015610a5657600080fd5b81019080803590602001909291905050506124f0565b604051808215151515815260200191505060405180910390f35b348015610a9257600080fd5b50610ad560048036036020811015610aa957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061251a565b005b348015610ae357600080fd5b50610aec612620565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b2f578082015181840152602081019050610b14565b505050509050019250505060405180910390f35b348015610b4f57600080fd5b50610b58612678565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b9b578082015181840152602081019050610b80565b505050509050019250505060405180910390f35b348015610bbb57600080fd5b50610bc46126d0565b6040518082815260200191505060405180910390f35b348015610be657600080fd5b50610bef6126d6565b604051808215151515815260200191505060405180910390f35b610cdf60048036036060811015610c1f57600080fd5b8101908080359060200190640100000000811115610c3c57600080fd5b820183602082011115610c4e57600080fd5b80359060200191846001830284011164010000000083111715610c7057600080fd5b909192939192939080359060200190640100000000811115610c9157600080fd5b820183602082011115610ca357600080fd5b80359060200191846001830284011164010000000083111715610cc557600080fd5b9091929391929390803590602001909291905050506126e9565b005b348015610ced57600080fd5b50610d1a60048036036020811015610d0457600080fd5b81019080803590602001909291905050506127e5565b60405180848152602001838152602001828152602001935050505060405180910390f35b348015610d4a57600080fd5b50610d8160048036036040811015610d6157600080fd5b8101908080359060200190929190803590602001909291905050506128b8565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b348015610db557600080fd5b50610de260048036036020811015610dcc57600080fd5b8101908080359060200190929190505050612993565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610e25578082015181840152602081019050610e0a565b505050509050019250505060405180910390f35b348015610e4557600080fd5b50610e4e6129fe565b005b348015610e5c57600080fd5b50610e8960048036036020811015610e7357600080fd5b8101908080359060200190929190505050612b43565b6040518082815260200191505060405180910390f35b348015610eab57600080fd5b50610eee60048036036020811015610ec257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b60565b005b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5c57600080fd5b505afa158015610f70573d6000803e3d6000fd5b505050506040513d6020811015610f8657600080fd5b8101908080519060200190929190505050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b15801561100257600080fd5b505afa158015611016573d6000803e3d6000fd5b505050506040513d602081101561102c57600080fd5b810190808051906020019092919050505090506000808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156110bf57600080fd5b505afa1580156110d3573d6000803e3d6000fd5b505050506040513d60208110156110e957600080fd5b810190808051906020019092919050505090506000600190505b600780549050811161149d576111198189611d36565b8095508199508298505050508515611349576000600954848161113857fe5b06840390506000600160056000848152602001908152602001600020805490500160056000848152602001908152602001600020805490506003600085815260200190815260200160002054028a018161118e57fe5b0490508060036000848152602001908152602001600020819055507f11d6fa234e47ea0871bd2e6efeb4e7be326a7216c36990b799a61a501cfcf1c38282604051808381526020018281526020019250505060405180910390a160056000838152602001908152602001600020839080600181540180825580915050906001820390600052602060002001600090919290919091505550600015156002600084815260200190815260200160002060009054906101000a900460ff16151514156112e757600682908060018154018082558091505090600182039060005260206000200160009091929091909150555060016002600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817f2afa03c814297ffc234ff967b6f0863d3c358be243103f20217c8d3a4d39f9c08a6040518082815260200191505060405180910390a2611342565b600115156004600084815260200190815260200160002060009054906101000a900460ff16151514156113415760006004600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b5050611490565b6007805490508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156113cc57600080fd5b505afa1580156113e0573d6000803e3d6000fd5b505050506040513d60208110156113f657600080fd5b8101908080519060200190929190505050111561148f578373ffffffffffffffffffffffffffffffffffffffff1663752d49a182600780549050858161143857fe5b046040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b505050505b5b8080600101915050611103565b5050505050915091565b60008060068054905011611523576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f54696d657374616d707327206c656e677468206973203000000000000000000081525060200191505060405180910390fd5b61154b60066001600680549050038154811061153b57fe5b9060005260206000200154612b43565b905090565b600f5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632639e0b034836040518363ffffffff1660e01b8152600401808281526020019150506000604051808303818588803b1580156115ca57600080fd5b505af11580156115de573d6000803e3d6000fd5b505050505050565b600a5434101561165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f56616c75652069732062656c6f7720646973707574652066656500000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060009054906101000a900460ff166116d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180612d216034913960400191505060405180910390fd5b600b54810160095442816116e457fe5b064203111561175b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4469737075746520706572696f6420697320636c6f736564000000000000000081525060200191505060405180910390fd5b60016004600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055507fb199747b7b98ffd681a09c542f7f62ba4972f6f5b7d791b6f8bba36862cbdd2b33826003600085815260200190815260200160002054604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150565b600060056000838152602001908152602001600020805490509050919050565b600954428161186757fe5b064203600c8190555080600954428161187c57fe5b06420301600d8190555050565b60026020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b600d5481565b600e5481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633fcad964856040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d606081101561197657600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509193909250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1157600080fd5b505afa158015611a25573d6000803e3d6000fd5b505050506040513d6020811015611a3b57600080fd5b810190808051906020019092919050505090506000821115611bc0578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611b1257600080fd5b505af1158015611b26573d6000803e3d6000fd5b505050506040513d6020811015611b3c57600080fd5b8101908080519060200190929190505050611bbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b5b8073ffffffffffffffffffffffffffffffffffffffff16633fff28168888888888886040518763ffffffff1660e01b81526004018080602001806020018581526020018481526020018381038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508381038252878782818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b158015611c8357600080fd5b505af1158015611c97573d6000803e3d6000fd5b5050505050505050505050565b60056020528160005260406000208181548110611cbd57fe5b90600052602060002001600091509150505481565b60095481565b60606006805480602002602001604051908101604052809291908181526020018280548015611d2657602002820191906000526020600020905b815481526020019060010190808311611d12575b5050505050905090565b600b5481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f059f3e86866040518363ffffffff1660e01b8152600401808381526020018281526020019250505060606040518083038186803b158015611db557600080fd5b505afa158015611dc9573d6000803e3d6000fd5b505050506040513d6060811015611ddf57600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509250925092565b6000600880549050905090565b60008060008060068054905090506000811115611f005760008190505b6000811115611edd578560066001830381548110611e5557fe5b906000526020600020015410158015611eac5750600015156004600060066001850381548110611e8157fe5b9060005260206000200154815260200190815260200160002060009054906101000a900460ff161515145b15611ecf5760066001820381548110611ec157fe5b906000526020600020015492505b808060019003915050611e3b565b506000821115611eff576001611ef283612b43565b8393509350935050611f13565b5b6000806000819150809050935093509350505b9193909250565b600060088281548110611f2957fe5b90600052602060002001549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa457600080fd5b505afa158015611fb8573d6000803e3d6000fd5b505050506040513d6020811015611fce57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561209c57600080fd5b505af11580156120b0573d6000803e3d6000fd5b505050506040513d60208110156120c657600080fd5b8101908080519060200190929190505050612149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663752d49a184846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156121a457600080fd5b505af11580156121b8573d6000803e3d6000fd5b50505050505050565b600c5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461228a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b60001515612297836124f0565b15151461230c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f54696d657374616d7020697320616c726561647920736574000000000000000081525060200191505060405180910390fd5b80600360008481526020019081526020016000208190555060016002600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506006829080600181540180825580915050906001820390600052602060002001600090919290919091505550817f2afa03c814297ffc234ff967b6f0863d3c358be243103f20217c8d3a4d39f9c0826040518082815260200191505060405180910390a25050565b60006004600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000806123f0600c54611e1e565b600e6000829550839190505582945050505081156124b357612413600d54611e1e565b600f6000829550839190505582945050505081156124b257600e54600f541115612453576001601060006101000a81548160ff0219169083151502179055505b6001601060016101000a81548160ff0219169083151502179055507fbbdea414ca4370d674fd5e370fbc6d7da2dafff34ec019faaf1c36b1180a314b600e54600f54604051808381526020018281526020019250505060405180910390a15b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060019054906101000a900460ff1681565b60006002600083815260200190815260200160002060009054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600780548060200260200160405190810160405280929190818152602001828054801561266e57602002820191906000526020600020905b81548152602001906001019080831161265a575b5050505050905090565b606060088054806020026020016040519081016040528092919081815260200182805480156126c657602002820191906000526020600020905b8154815260200190600101908083116126b2575b5050505050905090565b600a5481565b601060009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb19e2963487878787876040518763ffffffff1660e01b81526004018080602001806020018481526020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252868682818152602001925080828437600081840152601f19601f8201169050808301925050509750505050505050506000604051808303818588803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b50505050505050505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d09cc57e856040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b15801561285c57600080fd5b505afa158015612870573d6000803e3d6000fd5b505050506040513d606081101561288657600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509193909250565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d269a83c86866040518363ffffffff1660e01b8152600401808381526020018281526020019250505060606040518083038186803b15801561293757600080fd5b505afa15801561294b573d6000803e3d6000fd5b505050506040513d606081101561296157600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509250925092565b6060600560008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156129f257602002820191906000526020600020905b8154815260200190600101908083116129de575b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ac1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612b40573d6000803e3d6000fd5b50565b600060036000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe56616c756520666f72207468652074696d657374616d70206265696e6720646973707574656420646f65736e2774206578697374a165627a7a72305820af5fadc243f4edabda6a2de8dcf73d31bd032c5ef5426944ae8c139124fd8bd50029",
  "deployedBytecode": "",
  "sourceMap": "165:2483:16:-;;;1242:262;8:9:-1;5:2;;;30:1;27;20:12;5:2;1242:262:16;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1242:262:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1242:262:16;;;;;;;;;;;;;;;;;1418:13;1433:19;1454:14;1470:11;1483:12;2616:13:1;767::4;733:18;;:48;;;;;;;;;;;;;;;;;;800:10;792:5;;:18;;;;;;;;;;;;;;;;;;680:138;2660:19:1;2647:10;:32;;;;2706:14;2690:13;:30;;;;2745:12;2731:11;:26;;;;2781:11;2768:10;:24;;;;;;;;;;;;:::i;:::-;;2439:361;;;;;1242:262:16;;;;;165:2483;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "165:2483:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5051:2995:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5051:2995:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5051:2995:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10350:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10350:210:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;308:23:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;308:23:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5131:156:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5131:156:4;;;;;;;;;;;;;;;;;:::i;:::-;;3911:784:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3911:784:1;;;;;;;;;;;;;;;;;:::i;:::-;;9804:154;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9804:154:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9804:154:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1680:178:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1680:178:16;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1680:178:16;;;;;;;;;;;;;;;;;:::i;:::-;;373:39:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;373:39:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;373:39:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;576:46;;8:9:-1;5:2;;;30:1;27;20:12;5:2;576:46:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;576:46:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;243:26:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;243:26:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;276:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;276:25:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1106:199:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1106:199:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1106:199:4;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3492:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3492:403:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;3492:403:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3492:403:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3492:403:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3492:403:4;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3492:403:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3492:403:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3492:403:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;706:55:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;706:55:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;706:55:1;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1218:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1218:26:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10692:102;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10692:102:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10692:102:1;;;;;;;;;;;;;;;;;1297:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1297:28:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1965:234:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1965:234:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1965:234:4;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11759:121:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11759:121:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8568:652;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8568:652:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8568:652:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12564:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12564:134:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12564:134:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4624:277:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4624:277:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4624:277:4;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;208:28:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;208:28:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3032:699:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3032:699:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3032:699:1;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12334:121;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12334:121:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12334:121:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2103:542:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2103:542:16;;;:::i;:::-;;400:28:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;400:28:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;365:25:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;365:25:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10120:112:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10120:112:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10120:112:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5406:206:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5406:206:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5406:206:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;10956:102:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10956:102:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10956:102:1;;;;;;;;;;;;;;;;;12012:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12012:115:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12012:115:1;;;;;;;;;;;;;;;;;1251:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1251:25:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;338:20:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;338:20:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4230:228:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4230:228:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4230:228:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4230:228:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4230:228:4;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4230:228:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4230:228:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4230:228:4;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1313:160;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1313:160:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1313:160:4;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2559:265;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2559:265:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2559:265:4;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11450:148:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11450:148:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11450:148:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11450:148:1;;;;;;;;;;;;;;;;;8152:159;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8152:159:1;;;:::i;:::-;;9385:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9385:143:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9385:143:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5716:215:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5716:215:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5716:215:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;5051:2995:1;5112:14;5128:12;5371:20;5407:18;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5407:41:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5407:41:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5407:41:1;;;;;;;;;;;;;;;;5371:78;;5460:18;5488;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5488:41:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5488:41:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5488:41:1;;;;;;;;;;;;;;;;5460:70;;5541:27;5579:23;5605:7;:17;;;5631:4;5605:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5605:32:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5605:32:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5605:32:1;;;;;;;;;;;;;;;;5579:58;;5828:9;5840:1;5828:13;;5823:2216;5848:10;:17;;;;5843:1;:22;5823:2216;;6117:40;6143:1;6146:10;6117:25;:40::i;:::-;6076:81;;;;;;;;;;;;6176:7;6172:1856;;;6204:16;6268:11;;6246:19;:33;;;;;;6223:19;:57;6204:76;;6434:17;6593:1;6555:18;:28;6574:8;6555:28;;;;;;;;;;;:35;;;;:39;6494:18;:28;6513:8;6494:28;;;;;;;;;;;:35;;;;6464:17;:27;6482:8;6464:27;;;;;;;;;;;;:65;6455:6;:74;6454:141;;;;;;6434:161;;6717:9;6687:17;:27;6705:8;6687:27;;;;;;;;;;;:39;;;;6750:38;6768:8;6778:9;6750:38;;;;;;;;;;;;;;;;;;;;;;;;6928:18;:28;6947:8;6928:28;;;;;;;;;;;6962:1;6928:36;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;6928:36:1;;;;;;;;;;;;;;;;;;;;;;7318:5;7297:26;;:7;:17;7305:8;7297:17;;;;;;;;;;;;;;;;;;;;;:26;;;7293:323;;;7348:10;7364:8;7348:25;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;7348:25:1;;;;;;;;;;;;;;;;;;;;;;7416:4;7396:7;:17;7404:8;7396:17;;;;;;;;;;;;:24;;;;;;;;;;;;;;;;;;7460:8;7448:29;7470:6;7448:29;;;;;;;;;;;;;;;;;;7293:323;;;7535:4;7507:32;;:14;:24;7522:8;7507:24;;;;;;;;;;;;;;;;;;;;;:32;;;7503:113;;;7591:5;7564:14;:24;7579:8;7564:24;;;;;;;;;;;;:32;;;;;;;;;;;;;;;;;;7503:113;7293:323;6172:1856;;;;;7852:10;:17;;;;7817:7;:17;;;7843:4;7817:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7817:32:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7817:32:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7817:32:1;;;;;;;;;;;;;;;;:52;7813:215;;;7954:11;:18;;;7973:1;7994:10;:17;;;;7976:15;:35;;;;;;7954:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7954:58:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7954:58:1;;;;7813:215;6172:1856;5867:3;;;;;;;5823:2216;;;;5051:2995;;;;;;;:::o;10350:210::-;10400:7;10448:1;10428:10;:17;;;;:21;10420:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10495;10518:10;10549:1;10529:10;:17;;;;:21;10518:33;;;;;;;;;;;;;;;;10495:22;:57::i;:::-;10488:64;;10350:210;:::o;308:23:16:-;;;;:::o;5131:156:4:-;5215:18;;;;;;;;;;;5202:48;;;5257:9;5268:10;5202:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5202:77:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5202:77:4;;;;;5131:156;:::o;3911:784:1:-;4012:10;;3999:9;:23;;3991:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4154:7;:19;4162:10;4154:19;;;;;;;;;;;;;;;;;;;;;4146:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4338:13;;4325:10;:26;4309:11;;4303:3;:17;;;;;;4296:3;:25;:55;;4288:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4487:4;4458:14;:26;4473:10;4458:26;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;4567:19;4592:10;4567:36;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;4567:36:1;;;;;;;;;;;;;;;;;;;;;;4619:68;4633:10;4645;4657:17;:29;4675:10;4657:29;;;;;;;;;;;;4619:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3911:784;:::o;9804:154::-;9886:7;9913:18;:30;9932:10;9913:30;;;;;;;;;;;:37;;;;9906:44;;9804:154;;;:::o;1680:178:16:-;1776:11;;1770:3;:17;;;;;;1763:3;:25;1747:13;:41;;;;1841:9;1826:11;;1820:3;:17;;;;;;1813:3;:25;:37;1799:11;:51;;;;1680:178;:::o;373:39:1:-;;;;;;;;;;;;;;;;;;;;;;:::o;576:46::-;;;;;;;;;;;;;;;;;;;;;;:::o;243:26:16:-;;;;:::o;276:25::-;;;;:::o;1106:199:4:-;1172:15;1189:13;1204:27;1251:18;;;;;;;;;;;:34;;;1286:10;1251:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1251:46:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1251:46:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1251:46:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1244:53;;;;;;1106:199;;;;;:::o;3492:403::-;3620:14;3644:18;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3644:41:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3644:41:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3644:41:4;;;;;;;;;;;;;;;;3620:66;;3708:1;3701:4;:8;3697:122;;;3734:7;:20;;;3755:10;3775:4;3782;3734:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3734:53:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3734:53:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3734:53:4;;;;;;;;;;;;;;;;3726:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3697:122;3829:7;:19;;;3849:8;;3859:7;;3868:12;3882:4;3829:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3829:58:4;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3829:58:4;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3829:58:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3829:58:4;;;;3492:403;;;;;;;:::o;706:55:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1218:26::-;;;;:::o;10692:102::-;10740:16;10776:10;10769:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10692:102;:::o;1297:28::-;;;;:::o;1965:234:4:-;2061:4;2067:7;2076:27;2123:18;;;;;;;;;;;:44;;;2168:10;2180;2123:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2123:68:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2123:68:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2123:68:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2116:75;;;;;;1965:234;;;;;:::o;11759:121:1:-;11819:7;11846:19;:26;;;;11839:33;;11759:121;:::o;8568:652::-;8647:4;8653:7;8662:27;8702:14;8719:10;:17;;;;8702:34;;8760:1;8751:6;:10;8747:435;;;8783:9;8795:6;8783:18;;8778:236;8807:1;8803;:5;8778:236;;;8859:10;8838;8853:1;8849;:5;8838:17;;;;;;;;;;;;;;;;:31;;:77;;;;;8910:5;8873:42;;:14;:33;8888:10;8903:1;8899;:5;8888:17;;;;;;;;;;;;;;;;8873:33;;;;;;;;;;;;;;;;;;;;;:42;;;8838:77;8834:165;;;8962:10;8977:1;8973;:5;8962:17;;;;;;;;;;;;;;;;8940:39;;8834:165;8810:3;;;;;;;;8778:236;;;;9054:1;9032:19;:23;9028:143;;;9084:4;9090:43;9113:19;9090:22;:43::i;:::-;9135:19;9076:79;;;;;;;;;9028:143;8747:435;9200:5;9207:1;9210;9192:20;;;;;;;;;;;;;8568:652;;;;;;:::o;12564:134::-;12636:7;12663:19;12683:6;12663:27;;;;;;;;;;;;;;;;12656:34;;12564:134;;;:::o;4624:277:4:-;4692:14;4716:18;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4716:41:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4716:41:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4716:41:4;;;;;;;;;;;;;;;;4692:66;;4777:7;:20;;;4798:10;4818:4;4825;4777:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4777:53:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4777:53:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4777:53:4;;;;;;;;;;;;;;;;4769:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4861:7;:14;;;4876:10;4888:4;4861:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4861:32:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4861:32:4;;;;4624:277;;;:::o;208:28:16:-;;;;:::o;3032:699:1:-;3170:5;;;;;;;;;;;3156:19;;:10;:19;;;3148:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3315:5;3289:31;;:22;3300:10;3289;:22::i;:::-;:31;;;3281:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3418:6;3386:17;:29;3404:10;3386:29;;;;;;;;;;;:38;;;;3507:4;3485:7;:19;3493:10;3485:19;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;3572:10;3588;3572:27;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3572:27:1;;;;;;;;;;;;;;;;;;;;;;3702:10;3690:31;3714:6;3690:31;;;;;;;;;;;;;;;;;;3032:699;;:::o;12334:121::-;12397:4;12421:14;:26;12436:10;12421:26;;;;;;;;;;;;;;;;;;;;;12414:33;;12334:121;;;:::o;2103:542:16:-;2150:12;2173:13;2228:43;2257:13;;2228:28;:43::i;:::-;2207:10;;2197:74;;;;;;;;;;;;;;2286:7;2282:356;;;2339:41;2368:11;;2339:28;:41::i;:::-;2320:8;;2310:70;;;;;;;;;;;;;;2399:7;2395:232;;;2442:10;;2431:8;;:21;2427:85;;;2488:4;2477:8;;:15;;;;;;;;;;;;;;;;;;2427:85;2546:4;2530:13;;:20;;;;;;;;;;;;;;;;;;2574:37;2590:10;;2602:8;;2574:37;;;;;;;;;;;;;;;;;;;;;;;;2395:232;2282:356;2103:542;;:::o;400:28:4:-;;;;;;;;;;;;;:::o;365:25:16:-;;;;;;;;;;;;;:::o;10120:112:1:-;10181:4;10205:7;:19;10213:10;10205:19;;;;;;;;;;;;;;;;;;;;;10198:26;;10120:112;;;:::o;5406:206:4:-;5494:5;;;;;;;;;;;5480:19;;:10;:19;;;5472:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5590:13;5556:18;;:48;;;;;;;;;;;;;;;;;;5406:206;:::o;10956:102:1:-;11004:16;11040:10;11033:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10956:102;:::o;12012:115::-;12064:16;12100:19;12093:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12012:115;:::o;1251:25::-;;;;:::o;338:20:16:-;;;;;;;;;;;;;:::o;4230:228:4:-;4361:18;;;;;;;;;;;:39;;;4407:9;4418:8;;4428:7;;4437:12;4361:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4361:89:4;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4361:89:4;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4361:89:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4361:89:4;;;;;4230:228;;;;;:::o;1313:160::-;1367:17;1385:14;1401:13;1433:18;;;;;;;;;;;:28;;;1462:2;1433:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1433:32:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1433:32:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1433:32:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1426:39;;;;;;1313:160;;;;;:::o;2559:265::-;2672:16;2690:14;2706:27;2758:18;;;;;;;;;;;:34;;;2793:10;2805;2758:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2758:58:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2758:58:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2758:58:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2751:65;;;;;;2559:265;;;;;:::o;11450:148:1:-;11524:16;11560:18;:30;11579:10;11560:30;;;;;;;;;;;11553:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11450:148;;;:::o;8152:159::-;8217:5;;;;;;;;;;;8203:19;;:10;:19;;;8195:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8265:5;;;;;;;;;;;8257:23;;:46;8289:4;8281:21;;;8257:46;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8257:46:1;8152:159::o;9385:143::-;9458:13;9491:17;:29;9509:10;9491:29;;;;;;;;;;;;9484:36;;9385:143;;;:::o;5716:215:4:-;5812:5;;;;;;;;;;;5798:19;;:10;:19;;;5790:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5857:38;5878:5;;;;;;;;;;;5885:9;5857:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5914:9;5906:5;;:17;;;;;;;;;;;;;;;;;;5716:215;:::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport \"../Optimistic.sol\";\r\n/**\r\n* @title Reader\r\n* This contracts is a pretend contract using Tellor that compares two time values\r\n*/\r\ncontract TestContract is Optimistic {\r\n    uint256 public startDateTime;\r\n    uint256 public endDateTime;\r\n    uint256 public startValue;\r\n    uint256 public endValue;\r\n    bool public longWins;\r\n    bool public contractEnded;\r\n    event ContractSettled(uint256 _svalue, uint256 _evalue);\r\n    /**\r\n    * @dev This constructor function is used to pass variables to the optimistic contract's constructor\r\n    * and the function is blank\r\n    * @param _userContract address for UserContract\r\n    * @param _disputeFeeRequired the fee to dispute the optimistic price(price sumbitted by known trusted party)\r\n    * @param _disputePeriod is the time frame a value can be disputed after being imputed\r\n    * @param _requestIds are the requests Id's on the Tellor System corresponding to the data types used on this contract.\r\n    * It is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\r\n    * System be sure to create some.\r\n    * @param _granularity is the amount of decimals desired on the requested value\r\n    */\r\n    constructor(address _userContract, uint256 _disputeFeeRequired, uint256 _disputePeriod, uint256[] memory _requestIds, uint256 _granularity)\r\n        public\r\n        Optimistic(_userContract, _disputeFeeRequired, _disputePeriod, _requestIds, _granularity)\r\n    {}\r\n\r\n    /**\r\n    * @dev creates a start(now) and end time(now + duration specified) for testing a contract start and end period\r\n    * @param _duration in seconds\r\n    */\r\n    function setContractDetails(uint256 _duration) external {\r\n        startDateTime = now - (now % granularity);\r\n        endDateTime = now - (now % granularity) + _duration;\r\n    }\r\n\r\n    /**\r\n    * @dev testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\r\n    * and the first undisputed value after the end time of the contract and settleling(payin off) it.\r\n    */\r\n    function settleContracts() external {\r\n        bool _didGet;\r\n        uint256 _time;\r\n        (_didGet, startValue, _time) = getFirstUndisputedValueAfter(startDateTime);\r\n        if (_didGet) {\r\n            (_didGet, endValue, _time) = getFirstUndisputedValueAfter(endDateTime);\r\n            if (_didGet) {\r\n                if (endValue > startValue) {\r\n                    longWins = true;\r\n                }\r\n                contractEnded = true;\r\n                emit ContractSettled(startValue, endValue);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "sourcePath": "C:/company/code/usingTellor/contracts/testContracts/TestContract.sol",
  "ast": {
    "absolutePath": "/C/company/code/usingTellor/contracts/testContracts/TestContract.sol",
    "exportedSymbols": {
      "TestContract": [
        4845
      ]
    },
    "id": 4846,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4723,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:16"
      },
      {
        "absolutePath": "/C/company/code/usingTellor/contracts/Optimistic.sol",
        "file": "../Optimistic.sol",
        "id": 4724,
        "nodeType": "ImportDirective",
        "scope": 4846,
        "sourceUnit": 657,
        "src": "27:27:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4725,
              "name": "Optimistic",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 656,
              "src": "190:10:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Optimistic_$656",
                "typeString": "contract Optimistic"
              }
            },
            "id": 4726,
            "nodeType": "InheritanceSpecifier",
            "src": "190:10:16"
          }
        ],
        "contractDependencies": [
          656,
          1647,
          1661
        ],
        "contractKind": "contract",
        "documentation": "@title Reader\r\nThis contracts is a pretend contract using Tellor that compares two time values\r",
        "fullyImplemented": true,
        "id": 4845,
        "linearizedBaseContracts": [
          4845,
          656,
          1647,
          1661
        ],
        "name": "TestContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4728,
            "name": "startDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "208:28:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4727,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "208:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4730,
            "name": "endDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "243:26:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4729,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "243:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4732,
            "name": "startValue",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "276:25:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4731,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "276:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4734,
            "name": "endValue",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "308:23:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4733,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "308:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4736,
            "name": "longWins",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "338:20:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4735,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "338:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4738,
            "name": "contractEnded",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "365:25:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4737,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "365:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 4744,
            "name": "ContractSettled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4740,
                  "indexed": false,
                  "name": "_svalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 4744,
                  "src": "419:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4739,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "419:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4742,
                  "indexed": false,
                  "name": "_evalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 4744,
                  "src": "436:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4741,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "436:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "418:34:16"
            },
            "src": "397:56:16"
          },
          {
            "body": {
              "id": 4765,
              "nodeType": "Block",
              "src": "1502:2:16",
              "statements": []
            },
            "documentation": "@dev This constructor function is used to pass variables to the optimistic contract's constructor\r\nand the function is blank\r\n@param _userContract address for UserContract\r\n@param _disputeFeeRequired the fee to dispute the optimistic price(price sumbitted by known trusted party)\r\n@param _disputePeriod is the time frame a value can be disputed after being imputed\r\n@param _requestIds are the requests Id's on the Tellor System corresponding to the data types used on this contract.\r\nIt is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\r\nSystem be sure to create some.\r\n@param _granularity is the amount of decimals desired on the requested value\r",
            "id": 4766,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4758,
                    "name": "_userContract",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4746,
                    "src": "1418:13:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4759,
                    "name": "_disputeFeeRequired",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4748,
                    "src": "1433:19:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4760,
                    "name": "_disputePeriod",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4750,
                    "src": "1454:14:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4761,
                    "name": "_requestIds",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4753,
                    "src": "1470:11:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4762,
                    "name": "_granularity",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4755,
                    "src": "1483:12:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 4763,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4757,
                  "name": "Optimistic",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 656,
                  "src": "1407:10:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Optimistic_$656_$",
                    "typeString": "type(contract Optimistic)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1407:89:16"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4756,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4746,
                  "name": "_userContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1254:21:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4745,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1254:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4748,
                  "name": "_disputeFeeRequired",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1277:27:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4747,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1277:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4750,
                  "name": "_disputePeriod",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1306:22:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4749,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1306:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4753,
                  "name": "_requestIds",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1330:28:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4751,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1330:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4752,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1330:9:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4755,
                  "name": "_granularity",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1360:20:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4754,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1360:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1253:128:16"
            },
            "returnParameters": {
              "id": 4764,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1502:0:16"
            },
            "scope": 4845,
            "src": "1242:262:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4791,
              "nodeType": "Block",
              "src": "1736:122:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 4778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 4771,
                      "name": "startDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4728,
                      "src": "1747:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4777,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 4772,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4862,
                        "src": "1763:3:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4775,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 4773,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4862,
                              "src": "1770:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 4774,
                              "name": "granularity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 89,
                              "src": "1776:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1770:17:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 4776,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1769:19:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1763:25:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1747:41:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4779,
                  "nodeType": "ExpressionStatement",
                  "src": "1747:41:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 4789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 4780,
                      "name": "endDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4730,
                      "src": "1799:11:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4788,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4786,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 4781,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4862,
                          "src": "1813:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4784,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 4782,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4862,
                                "src": "1820:3:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 4783,
                                "name": "granularity",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 89,
                                "src": "1826:11:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1820:17:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 4785,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1819:19:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1813:25:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "id": 4787,
                        "name": "_duration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4768,
                        "src": "1841:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1813:37:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1799:51:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4790,
                  "nodeType": "ExpressionStatement",
                  "src": "1799:51:16"
                }
              ]
            },
            "documentation": "@dev creates a start(now) and end time(now + duration specified) for testing a contract start and end period\r\n@param _duration in seconds\r",
            "id": 4792,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setContractDetails",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4768,
                  "name": "_duration",
                  "nodeType": "VariableDeclaration",
                  "scope": 4792,
                  "src": "1708:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4767,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1708:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1707:19:16"
            },
            "returnParameters": {
              "id": 4770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1736:0:16"
            },
            "scope": 4845,
            "src": "1680:178:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4843,
              "nodeType": "Block",
              "src": "2139:506:16",
              "statements": [
                {
                  "assignments": [
                    4796
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4796,
                      "name": "_didGet",
                      "nodeType": "VariableDeclaration",
                      "scope": 4843,
                      "src": "2150:12:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 4795,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2150:4:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 4797,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2150:12:16"
                },
                {
                  "assignments": [
                    4799
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4799,
                      "name": "_time",
                      "nodeType": "VariableDeclaration",
                      "scope": 4843,
                      "src": "2173:13:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4798,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2173:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 4800,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2173:13:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 4808,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "id": 4801,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4796,
                          "src": "2198:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 4802,
                          "name": "startValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4732,
                          "src": "2207:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 4803,
                          "name": "_time",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4799,
                          "src": "2219:5:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 4804,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "2197:28:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 4806,
                          "name": "startDateTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4728,
                          "src": "2257:13:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 4805,
                        "name": "getFirstUndisputedValueAfter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 522,
                        "src": "2228:28:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                          "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                        }
                      },
                      "id": 4807,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2228:43:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "src": "2197:74:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4809,
                  "nodeType": "ExpressionStatement",
                  "src": "2197:74:16"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 4810,
                    "name": "_didGet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4796,
                    "src": "2286:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 4842,
                  "nodeType": "IfStatement",
                  "src": "2282:356:16",
                  "trueBody": {
                    "id": 4841,
                    "nodeType": "Block",
                    "src": "2295:343:16",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 4818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "id": 4811,
                                "name": "_didGet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4796,
                                "src": "2311:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 4812,
                                "name": "endValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4734,
                                "src": "2320:8:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 4813,
                                "name": "_time",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4799,
                                "src": "2330:5:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 4814,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "2310:26:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 4816,
                                "name": "endDateTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4730,
                                "src": "2368:11:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 4815,
                              "name": "getFirstUndisputedValueAfter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 522,
                              "src": "2339:28:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                                "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                              }
                            },
                            "id": 4817,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2339:41:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "src": "2310:70:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4819,
                        "nodeType": "ExpressionStatement",
                        "src": "2310:70:16"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 4820,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4796,
                          "src": "2399:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 4840,
                        "nodeType": "IfStatement",
                        "src": "2395:232:16",
                        "trueBody": {
                          "id": 4839,
                          "nodeType": "Block",
                          "src": "2408:219:16",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4823,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 4821,
                                  "name": "endValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4734,
                                  "src": "2431:8:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 4822,
                                  "name": "startValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4732,
                                  "src": "2442:10:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2431:21:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 4829,
                              "nodeType": "IfStatement",
                              "src": "2427:85:16",
                              "trueBody": {
                                "id": 4828,
                                "nodeType": "Block",
                                "src": "2454:58:16",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 4826,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 4824,
                                        "name": "longWins",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4736,
                                        "src": "2477:8:16",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 4825,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2488:4:16",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "2477:15:16",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 4827,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2477:15:16"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 4832,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 4830,
                                  "name": "contractEnded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4738,
                                  "src": "2530:13:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 4831,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2546:4:16",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "2530:20:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 4833,
                              "nodeType": "ExpressionStatement",
                              "src": "2530:20:16"
                            },
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 4835,
                                    "name": "startValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4732,
                                    "src": "2590:10:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 4836,
                                    "name": "endValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4734,
                                    "src": "2602:8:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 4834,
                                  "name": "ContractSettled",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4744,
                                  "src": "2574:15:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 4837,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2574:37:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4838,
                              "nodeType": "EmitStatement",
                              "src": "2569:42:16"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\r\nand the first undisputed value after the end time of the contract and settleling(payin off) it.\r",
            "id": 4844,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "settleContracts",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4793,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2127:2:16"
            },
            "returnParameters": {
              "id": 4794,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2139:0:16"
            },
            "scope": 4845,
            "src": "2103:542:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 4846,
        "src": "165:2483:16"
      }
    ],
    "src": "0:2650:16"
  },
  "legacyAST": {
    "absolutePath": "/C/company/code/usingTellor/contracts/testContracts/TestContract.sol",
    "exportedSymbols": {
      "TestContract": [
        4845
      ]
    },
    "id": 4846,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4723,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:16"
      },
      {
        "absolutePath": "/C/company/code/usingTellor/contracts/Optimistic.sol",
        "file": "../Optimistic.sol",
        "id": 4724,
        "nodeType": "ImportDirective",
        "scope": 4846,
        "sourceUnit": 657,
        "src": "27:27:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4725,
              "name": "Optimistic",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 656,
              "src": "190:10:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Optimistic_$656",
                "typeString": "contract Optimistic"
              }
            },
            "id": 4726,
            "nodeType": "InheritanceSpecifier",
            "src": "190:10:16"
          }
        ],
        "contractDependencies": [
          656,
          1647,
          1661
        ],
        "contractKind": "contract",
        "documentation": "@title Reader\r\nThis contracts is a pretend contract using Tellor that compares two time values\r",
        "fullyImplemented": true,
        "id": 4845,
        "linearizedBaseContracts": [
          4845,
          656,
          1647,
          1661
        ],
        "name": "TestContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4728,
            "name": "startDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "208:28:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4727,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "208:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4730,
            "name": "endDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "243:26:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4729,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "243:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4732,
            "name": "startValue",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "276:25:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4731,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "276:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4734,
            "name": "endValue",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "308:23:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4733,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "308:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4736,
            "name": "longWins",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "338:20:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4735,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "338:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4738,
            "name": "contractEnded",
            "nodeType": "VariableDeclaration",
            "scope": 4845,
            "src": "365:25:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4737,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "365:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 4744,
            "name": "ContractSettled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4740,
                  "indexed": false,
                  "name": "_svalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 4744,
                  "src": "419:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4739,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "419:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4742,
                  "indexed": false,
                  "name": "_evalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 4744,
                  "src": "436:15:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4741,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "436:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "418:34:16"
            },
            "src": "397:56:16"
          },
          {
            "body": {
              "id": 4765,
              "nodeType": "Block",
              "src": "1502:2:16",
              "statements": []
            },
            "documentation": "@dev This constructor function is used to pass variables to the optimistic contract's constructor\r\nand the function is blank\r\n@param _userContract address for UserContract\r\n@param _disputeFeeRequired the fee to dispute the optimistic price(price sumbitted by known trusted party)\r\n@param _disputePeriod is the time frame a value can be disputed after being imputed\r\n@param _requestIds are the requests Id's on the Tellor System corresponding to the data types used on this contract.\r\nIt is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\r\nSystem be sure to create some.\r\n@param _granularity is the amount of decimals desired on the requested value\r",
            "id": 4766,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4758,
                    "name": "_userContract",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4746,
                    "src": "1418:13:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4759,
                    "name": "_disputeFeeRequired",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4748,
                    "src": "1433:19:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4760,
                    "name": "_disputePeriod",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4750,
                    "src": "1454:14:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4761,
                    "name": "_requestIds",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4753,
                    "src": "1470:11:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4762,
                    "name": "_granularity",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4755,
                    "src": "1483:12:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 4763,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4757,
                  "name": "Optimistic",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 656,
                  "src": "1407:10:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Optimistic_$656_$",
                    "typeString": "type(contract Optimistic)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1407:89:16"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4756,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4746,
                  "name": "_userContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1254:21:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4745,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1254:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4748,
                  "name": "_disputeFeeRequired",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1277:27:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4747,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1277:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4750,
                  "name": "_disputePeriod",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1306:22:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4749,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1306:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4753,
                  "name": "_requestIds",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1330:28:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4751,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1330:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4752,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1330:9:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4755,
                  "name": "_granularity",
                  "nodeType": "VariableDeclaration",
                  "scope": 4766,
                  "src": "1360:20:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4754,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1360:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1253:128:16"
            },
            "returnParameters": {
              "id": 4764,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1502:0:16"
            },
            "scope": 4845,
            "src": "1242:262:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4791,
              "nodeType": "Block",
              "src": "1736:122:16",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 4778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 4771,
                      "name": "startDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4728,
                      "src": "1747:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4777,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 4772,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4862,
                        "src": "1763:3:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4775,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 4773,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4862,
                              "src": "1770:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 4774,
                              "name": "granularity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 89,
                              "src": "1776:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1770:17:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 4776,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1769:19:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1763:25:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1747:41:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4779,
                  "nodeType": "ExpressionStatement",
                  "src": "1747:41:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 4789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 4780,
                      "name": "endDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4730,
                      "src": "1799:11:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4788,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4786,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 4781,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4862,
                          "src": "1813:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4784,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 4782,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4862,
                                "src": "1820:3:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 4783,
                                "name": "granularity",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 89,
                                "src": "1826:11:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1820:17:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 4785,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1819:19:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1813:25:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "id": 4787,
                        "name": "_duration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4768,
                        "src": "1841:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1813:37:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1799:51:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4790,
                  "nodeType": "ExpressionStatement",
                  "src": "1799:51:16"
                }
              ]
            },
            "documentation": "@dev creates a start(now) and end time(now + duration specified) for testing a contract start and end period\r\n@param _duration in seconds\r",
            "id": 4792,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setContractDetails",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4768,
                  "name": "_duration",
                  "nodeType": "VariableDeclaration",
                  "scope": 4792,
                  "src": "1708:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4767,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1708:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1707:19:16"
            },
            "returnParameters": {
              "id": 4770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1736:0:16"
            },
            "scope": 4845,
            "src": "1680:178:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4843,
              "nodeType": "Block",
              "src": "2139:506:16",
              "statements": [
                {
                  "assignments": [
                    4796
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4796,
                      "name": "_didGet",
                      "nodeType": "VariableDeclaration",
                      "scope": 4843,
                      "src": "2150:12:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 4795,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2150:4:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 4797,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2150:12:16"
                },
                {
                  "assignments": [
                    4799
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4799,
                      "name": "_time",
                      "nodeType": "VariableDeclaration",
                      "scope": 4843,
                      "src": "2173:13:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4798,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2173:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 4800,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2173:13:16"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 4808,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "id": 4801,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4796,
                          "src": "2198:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 4802,
                          "name": "startValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4732,
                          "src": "2207:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 4803,
                          "name": "_time",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4799,
                          "src": "2219:5:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 4804,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "2197:28:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 4806,
                          "name": "startDateTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4728,
                          "src": "2257:13:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 4805,
                        "name": "getFirstUndisputedValueAfter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 522,
                        "src": "2228:28:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                          "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                        }
                      },
                      "id": 4807,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2228:43:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "src": "2197:74:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4809,
                  "nodeType": "ExpressionStatement",
                  "src": "2197:74:16"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 4810,
                    "name": "_didGet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4796,
                    "src": "2286:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 4842,
                  "nodeType": "IfStatement",
                  "src": "2282:356:16",
                  "trueBody": {
                    "id": 4841,
                    "nodeType": "Block",
                    "src": "2295:343:16",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 4818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "id": 4811,
                                "name": "_didGet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4796,
                                "src": "2311:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 4812,
                                "name": "endValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4734,
                                "src": "2320:8:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 4813,
                                "name": "_time",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4799,
                                "src": "2330:5:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 4814,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "2310:26:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 4816,
                                "name": "endDateTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4730,
                                "src": "2368:11:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 4815,
                              "name": "getFirstUndisputedValueAfter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 522,
                              "src": "2339:28:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                                "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                              }
                            },
                            "id": 4817,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2339:41:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "src": "2310:70:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4819,
                        "nodeType": "ExpressionStatement",
                        "src": "2310:70:16"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 4820,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4796,
                          "src": "2399:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 4840,
                        "nodeType": "IfStatement",
                        "src": "2395:232:16",
                        "trueBody": {
                          "id": 4839,
                          "nodeType": "Block",
                          "src": "2408:219:16",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4823,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 4821,
                                  "name": "endValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4734,
                                  "src": "2431:8:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 4822,
                                  "name": "startValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4732,
                                  "src": "2442:10:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2431:21:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 4829,
                              "nodeType": "IfStatement",
                              "src": "2427:85:16",
                              "trueBody": {
                                "id": 4828,
                                "nodeType": "Block",
                                "src": "2454:58:16",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 4826,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 4824,
                                        "name": "longWins",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4736,
                                        "src": "2477:8:16",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 4825,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2488:4:16",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "2477:15:16",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 4827,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2477:15:16"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 4832,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 4830,
                                  "name": "contractEnded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4738,
                                  "src": "2530:13:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 4831,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2546:4:16",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "2530:20:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 4833,
                              "nodeType": "ExpressionStatement",
                              "src": "2530:20:16"
                            },
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 4835,
                                    "name": "startValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4732,
                                    "src": "2590:10:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 4836,
                                    "name": "endValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4734,
                                    "src": "2602:8:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 4834,
                                  "name": "ContractSettled",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4744,
                                  "src": "2574:15:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 4837,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2574:37:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4838,
                              "nodeType": "EmitStatement",
                              "src": "2569:42:16"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\r\nand the first undisputed value after the end time of the contract and settleling(payin off) it.\r",
            "id": 4844,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "settleContracts",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4793,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2127:2:16"
            },
            "returnParameters": {
              "id": 4794,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2139:0:16"
            },
            "scope": 4845,
            "src": "2103:542:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 4846,
        "src": "165:2483:16"
      }
    ],
    "src": "0:2650:16"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-12-16T18:23:10.350Z",
  "devdoc": {
    "methods": {
      "addTip(uint256,uint256)": {
        "details": "Allows the user to tip miners for the specified request using Tributes\r",
        "params": {
          "_requestId": "to tip\r",
          "_tip": "amount\r"
        }
      },
      "addTipWithEther(uint256)": {
        "details": "Allows user to add tip with Ether by sending the ETH to the userContract and exchanging it for Tributes\r at the price specified by the userContract owner.\r",
        "params": {
          "_requestId": "to tip\r"
        }
      },
      "constructor": {
        "details": "This constructor function is used to pass variables to the optimistic contract's constructor\r and the function is blank\r",
        "params": {
          "_disputeFeeRequired": "the fee to dispute the optimistic price(price sumbitted by known trusted party)\r",
          "_disputePeriod": "is the time frame a value can be disputed after being imputed\r",
          "_granularity": "is the amount of decimals desired on the requested value\r",
          "_requestIds": "are the requests Id's on the Tellor System corresponding to the data types used on this contract.\r It is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\r System be sure to create some.\r",
          "_userContract": "address for UserContract\r"
        }
      },
      "disputeOptimisticValue(uint256)": {
        "details": "allows user to initiate dispute on the value of the specified timestamp\r",
        "params": {
          "_timestamp": "is the timestamp for the value to be disputed\r"
        }
      },
      "getAnyDataAfter(uint256,uint256)": {
        "details": "Allows the user to get the first value for the requestId after the specified timestamp\r",
        "params": {
          "_requestId": "is the requestId to look up the value for\r",
          "_timestamp": "after which to search for first verified value\r"
        },
        "return": "bool true if it is able to retreive a value, the value, and the value's timestamp\r"
      },
      "getCurrentValue()": {
        "details": "Getter function for latest value available\r",
        "return": "latest value available\r"
      },
      "getCurrentValue(uint256)": {
        "details": "Allows the user to get the latest value for the requestId specified\r",
        "params": {
          "_requestId": "is the requestId to look up the value for\r"
        },
        "return": "bool true if it is able to retreive a value, the value, and the value's timestamp\r"
      },
      "getDisputedValueByIndex(uint256)": {
        "details": "Getter function for the dispute value by index\r",
        "return": "the value\r"
      },
      "getDisputedValues()": {
        "details": "Getter function for all disputed values\r",
        "return": "the array with all values under dispute\r"
      },
      "getFirstUndisputedValueAfter(uint256)": {
        "details": "Get the first undisputed value after the timestamp specified. This function is used within the getTellorValues\r but can be used on its own.\r",
        "params": {
          "_timestamp": "to search the first undisputed value there after\r"
        }
      },
      "getFirstVerifiedDataAfter(uint256,uint256)": {
        "details": "Allows the user to get the first verified value for the requestId after the specified timestamp\r",
        "params": {
          "_requestId": "is the requestId to look up the value for\r",
          "_timestamp": "after which to search for first verified value\r"
        },
        "return": "bool true if it is able to retreive a value, the value, and the value's timestamp, the timestamp after\r which it searched for the first verified value\r"
      },
      "getIsValue(uint256)": {
        "details": "Checks to if a value exists for the specifived timestamp\r",
        "params": {
          "_timestamp": "to verify\r"
        },
        "return": "ture if it exists\r"
      },
      "getMyValuesByTimestamp(uint256)": {
        "details": "Getter function for the value based on the timestamp specified\r",
        "params": {
          "_timestamp": "to retreive value from\r"
        }
      },
      "getNumberOfDisputedValues()": {
        "details": "Getter function for the number of disputed values\r",
        "return": "uint count of number of values for the spedified timestamp\r"
      },
      "getNumberOfValuesPerTimestamp(uint256)": {
        "details": "Getter function for the number of RequestIds associated with a timestamp, based on the timestamp specified\r",
        "params": {
          "_timestamp": "to retreive number of requestIds\r"
        },
        "return": "uint count of number of values for the spedified timestamp\r"
      },
      "getRequestIds()": {
        "details": "Getter function for the requests Ids' from Tellor associated with this price feed\r",
        "return": "uint array of requests Ids'\r"
      },
      "getRequestIdsIncluded(uint256)": {
        "details": "Getter function for the requests Ids' from Tellor associated with this price feed\r at the specified timestamp. This only gets populated after a dispute is initiated and the\r function getTellorValues is ran.\r",
        "params": {
          "_timestamp": "to retreive the requestIds\r"
        },
        "return": "uint array of requests Ids' included in the calcluation of the value\r"
      },
      "getTellorValues(uint256)": {
        "details": "This function gets the Tellor requestIds values for the disputed timestamp. It averages the values on the\r requestsIds and replaces the value set by the contract owner, centralized party.\r",
        "params": {
          "_timestamp": "to get Tellor data from\r"
        },
        "return": "uint of new value and true if it was able to get Tellor data\r"
      },
      "getTimestamps()": {
        "details": "Getter function for the timestamps available\r",
        "return": "uint array of timestamps available\r"
      },
      "isDisputed(uint256)": {
        "details": "This checks if the value for the specified timestamp is under dispute\r",
        "params": {
          "_timestamp": "to check if it is under dispute\r"
        },
        "return": "true if it is under dispute\r"
      },
      "requestData(string,string,uint256,uint256)": {
        "details": "Allows the user to submit a request for data to the oracle using Tributes\r Allowing this prevents us from increasing spread too high (since if we set the price too hight\r users will just go to an exchange and get tokens from there)\r",
        "params": {
          "_granularity": "is the number of decimals miners should include on the submitted value\r",
          "_request": "string API being requested to be mined\r",
          "_symbol": "is the short string symbol for the api request\r",
          "_tip": "amount the requester is willing to pay to be get on queue. Miners\r mine the onDeckQueryHash, or the api with the highest payout pool\r"
        }
      },
      "requestDataWithEther(string,string,uint256)": {
        "details": "Allows the user to submit a request for data to the oracle using ETH\r",
        "params": {
          "_granularity": "is the number of decimals miners should include on the submitted value\r",
          "_request": "string API being requested to be mined\r",
          "_symbol": "is the short string symbol for the api request\r"
        }
      },
      "setContractDetails(uint256)": {
        "details": "creates a start(now) and end time(now + duration specified) for testing a contract start and end period\r",
        "params": {
          "_duration": "in seconds\r"
        }
      },
      "setUserContract(address)": {
        "details": "allows owner to set the user contract address\r",
        "params": {
          "_userContract": "address\r"
        }
      },
      "setValue(uint256,uint256)": {
        "details": "allows contract owner, a centralized party to enter value\r",
        "params": {
          "_timestamp": "is the timestamp for the value\r",
          "_value": "is the value for the timestamp specified\r"
        }
      },
      "settleContracts()": {
        "details": "testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\r and the first undisputed value after the end time of the contract and settleling(payin off) it.\r"
      },
      "transferOwnership(address)": {
        "details": "allows owner to transfer ownership\r",
        "params": {
          "_newOwner": "address\r"
        }
      },
      "withdrawETH()": {
        "details": "Allows the contract owner(Tellor) to withdraw ETH from this contract\r"
      }
    },
    "title": "Reader\r This contracts is a pretend contract using Tellor that compares two time values\r"
  },
  "userdoc": {
    "methods": {}
  }
}